{"pages":[{"title":"about","text":"这是关于页面。","link":"/about/index.html"}],"posts":[{"title":"我的第一篇博客","text":"我的第一篇博客测试","link":"/2020/04/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"},{"title":"Hello","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/06/hello-world/"},{"title":"Jupyter Notebook使用技巧","text":"记录Pyhton编译器 Jupyter Notebook 的使用技巧。 （1）：运行代码块shift+enter：运行当前代码块，并跳到下一行代码块， ctrl+enter：只运行当前代码块 alter+enter：执行当前代码快，并在下方创建新的代码块 （2）：运行模式蓝色：命令模式 命令模式下：x —- 剪切代码块 ​ ：z —- 恢复代码块 ​ ：enter —- 进入到编辑模式 ​ ：d—- 删除代码块 绿色：编辑模式 —– 对文本进行编辑 编辑模式下按esc 退回到命令模式 （3）Markdown编辑在命令模式下按 m 键进入MarkDown编辑 （4）：所有快捷键查看按 h 键 （5）：快速创建代码块如果需要在a处的下方创建代码块，选中a处的代码块，按b键 如果需要在a处的上方创建代码块，选中a处的代码块，按a键 （6）：粘贴shift+v：粘贴到上面 v：粘贴到当前代码块 （7）：标记行数按l键","link":"/2020/05/02/Jupyter-Notebook%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"title":"实现android标题栏多级Menu菜单","text":"实现android标题栏的多级menu菜单 效果图如下： 图中的第一条点击展开。还会显示其他很多项。 1:设置Xml文件布局编程设置多级menu菜单 12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:title=\"ListView效果\" android:id=\"@+id/list_view\"&gt; &lt;menu&gt; &lt;item android:id=\"@+id/list_view_vertical_standrad\" android:title=\"垂直标准\"&gt; &lt;/item&gt; &lt;item android:id=\"@+id/list_view_vertical_reverse\" android:title=\"垂直反向\"&gt; &lt;/item&gt; &lt;item android:id=\"@+id/list_view_horizontal_standrad\" android:title=\"水平标准\"&gt; &lt;/item&gt; &lt;item android:id=\"@+id/list_view_horizontal_reverse\" android:title=\"水平反向\"&gt; &lt;/item&gt; &lt;/menu&gt; &lt;/item&gt; &lt;item android:title=\"GridView效果\" android:id=\"@+id/grid_view\"&gt; &lt;/item&gt; &lt;item android:title=\"瀑布流效果\" android:id=\"@+id/stagger_view\"&gt; &lt;/item&gt;&lt;/menu&gt; 2:配置ID与事件在需要调用的activity界面中重写onCreateOptionsMenu方法和onOptionsItemSelected方法 12345678910111213141516171819202122 //调用创建的menu菜单 @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.testtrillgates,menu); return super.onCreateOptionsMenu(menu); }//为menu菜单配置点击事件 @Override public boolean onOptionsItemSelected(@NonNull MenuItem item) { int itemId = item.getItemId(); switch (itemId){ case R.id.list_view_vertical_standrad: //执行操作 break; default: break; } return super.onOptionsItemSelected(item); }","link":"/2020/05/07/%E5%AE%9E%E7%8E%B0android%E6%A0%87%E9%A2%98%E6%A0%8F%E5%A4%9A%E7%BA%A7Menu%E8%8F%9C%E5%8D%95/"},{"title":"在子fragment实现TabLayout和ViewPager的组合","text":"在子fragment实现TabLayout和ViewPager的组合 1：问题描述在软件有一个主界面FragmentManagerActivity，在主界面的下面实现了BottomBar功能状态栏，点击每一项时会加载相应的Fragment，根据要求，需要在某一个fragment中实现，TabLayout和ViewPager的结合效果，如图所示： 2：代码实现（1）：首先实现点击下面第3个fragment的xml文件的代码编写，布局为fragment_temporary_task。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:id=\"@+id/draft_box_scrollview\" tools:context=\".fragment.TemporaryTaskFragment\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" android:background=\"@color/qmui_config_color_white\"&gt; &lt;com.google.android.material.tabs.TabLayout android:id=\"@+id/fragment_temp_tabLayout\" android:layout_width=\"match_parent\" android:layout_height=\"30dp\" app:tabIndicatorColor=\"@color/lightblue\" app:tabTextColor=\"@color/gray\" app:tabSelectedTextColor=\"@color/lightblue\" app:tabTextAppearance=\"@style/TabLayoutTextStyle\" app:tabMode=\"fixed\" app:tabBackground=\"@drawable/selector_bg\"&gt; &lt;/com.google.android.material.tabs.TabLayout&gt; &lt;androidx.viewpager.widget.ViewPager android:id=\"@+id/fragment_temp_viewpager\" android:layout_weight=\"1\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\"&gt; &lt;/androidx.viewpager.widget.ViewPager&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; 对应的Fragment文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class TemporaryTaskFragment extends Fragment { private static final String TAG = \"TemporaryTaskFragment\"; private QMUITabSegment tabSegment; private TabLayout mTabLayout; private ViewPager mViewPager; private TemporaryTaskFragmentAdapter myFragmentPagerAdapter; private PromptDialog promptDialog; private List&lt;Fragment&gt; fragments = new ArrayList&lt;&gt;(); private TabLayout.Tab one; private TabLayout.Tab two; public TemporaryTaskFragment() { // Required empty public constructor } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { Log.e(TAG,\"onCreateView\"); // Inflate the layout for this fragment View view = inflater.inflate(R.layout.fragment_temporary_task, container, false); AppCompatActivity activity = (AppCompatActivity) getActivity(); SimpleToolbar simple_toolbar = activity.findViewById(R.id.simple_toolbar); simple_toolbar.setVisibility(View.VISIBLE); promptDialog = new PromptDialog(getActivity()); initview(view); return view; } private void initview(View view) { //使用适配器将ViewPager与Fragment绑定在一起 mViewPager = view.findViewById(R.id.fragment_temp_viewpager); myFragmentPagerAdapter = new TemporaryTaskFragmentAdapter(getChildFragmentManager()); mViewPager.setAdapter(myFragmentPagerAdapter); //将TabLayout与ViewPager绑定在一起 mTabLayout = view.findViewById(R.id.fragment_temp_tabLayout); mTabLayout.setupWithViewPager(mViewPager); //指定Tab的位置 one = mTabLayout.getTabAt(0); two = mTabLayout.getTabAt(1); } } 注：如果此fragment是activity则需要将TemporaryTaskFragmentAdapter()中传入getActivity().getSupportFragmentManager()，此处传入getChildFragmentManager()是因为在fragment内含有很多个fragment，又在fragment中嵌套了子fragment，如果设置为前者而不是getChildFragmentManager()，则会出现在滑动viewpager时出现错误。 （2）：编写ViewPager的Adapter文件 1234567891011121314151617181920212223242526272829303132public class TemporaryTaskFragmentAdapter extends FragmentPagerAdapter { private static final String TAG = \"TemporaryTaskFragmentAd\"; private final String[] mTitles = {\"任务起草\",\"隐患上报\"}; public TemporaryTaskFragmentAdapter(@NonNull FragmentManager fm) { super(fm); } @NonNull @Override public Fragment getItem(int position) { Log.e(TAG,\"position:\"+position); if (position == 0){ return new DraftTaskFragment(); }else if (position == 1){ return new CheckDetailsVideoFragment(); } return new DraftTaskFragment(); } @Override public int getCount() { return mTitles.length; } //ViewPager与TabLayout绑定后，这里获取到PageTitle就是Tab的Text @Override public CharSequence getPageTitle(int position) { return mTitles[position]; }} 这样在滑动时，就会跳转到相应的“任务起草”Fragment或“隐患上报”Fragment，而不会出现错误。 3.后续但是在实际的使用过程中发现，当fragment先跳转到“我的”fragment即下面的图片 然后在点击下面左手数第三个图标就会出现下图的错误。 下面的bottombar就会消失，但是左右可以正常滑动，当点击上面页面中的某一个editetxt时，bottombar就会正常出现，如下图所示： “我的”界面的fragment是使用了QMUI的List的布局。出现这个bug后之后，首先分析可能是fragmentmanager中出现了多余的fragment，但是发现不对。其次，我又觉得可能是使用的xml的布局文件出现了问题，经过一段时间测试，发现也不是问题的根源所在。最后，我想起之前想尝试QMUI中的QMUITabSegment控件时，看了看QMUI的源码，发现QMUI中在使用Tab时，使用Tab的addOnTabSelectedListener属性，用来判断tab的滑动，就顺着这个思路试着看看能不能通过这个方法来切换fragment，经过尝试，就在xml文件的viewpager控件中，添加了一个fragmelayout布局，使其通过viewpager来切换fragment。源码如下 （1）：fragment_temporary_task.xml 修改为 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:id=\"@+id/draft_box_scrollview\" tools:context=\".fragment.TemporaryTaskFragment\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" android:background=\"@color/qmui_config_color_white\"&gt; &lt;com.google.android.material.tabs.TabLayout android:id=\"@+id/fragment_temp_tabLayout\" android:layout_width=\"match_parent\" android:layout_height=\"30dp\" app:tabMaxWidth=\"0dp\" app:tabGravity=\"fill\" app:tabIndicatorColor=\"@color/lightblue\" app:tabTextColor=\"@color/gray\" app:tabSelectedTextColor=\"@color/lightblue\" app:tabTextAppearance=\"@style/TabLayoutTextStyle\" app:tabMode=\"fixed\" app:tabBackground=\"@drawable/selector_bg\"&gt; &lt;/com.google.android.material.tabs.TabLayout&gt; &lt;androidx.viewpager.widget.ViewPager android:id=\"@+id/fragment_temp_viewpager\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;FrameLayout android:id=\"@+id/fl_content_temp\" android:layout_width=\"match_parent\" android:layout_height=\"0dp\" android:layout_weight=\"1\" /&gt; &lt;/androidx.viewpager.widget.ViewPager&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; （2）：与上面xml文件对应的fragment中代码修改为： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283public class TemporaryTaskFragment extends Fragment { private static final String TAG = \"TemporaryTaskFragment\"; private QMUITabSegment tabSegment; private TabLayout mTabLayout; private ViewPager mViewPager; private TemporaryTaskFragmentAdapter myFragmentPagerAdapter; private PromptDialog promptDialog; private TabLayout.Tab one; private TabLayout.Tab two; private FrameLayout frameLayout; private List&lt;Fragment&gt; mFragmentList = new ArrayList&lt;&gt;(); public TemporaryTaskFragment() { // Required empty public constructor } @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { // Inflate the layout for this fragment View view = inflater.inflate(R.layout.fragment_temporary_task, container, false); promptDialog = new PromptDialog(getActivity()); initview(view); return view; } private void initview(View view) {// tabSegment = view.findViewById(R.id.fragment_temp_tab); mFragmentList.clear(); mFragmentList.add(new DraftTaskFragment()); mFragmentList.add(new YinhuanFragment()); frameLayout = view.findViewById(R.id.fl_content_temp); //使用适配器将ViewPager与Fragment绑定在一起 mViewPager = view.findViewById(R.id.fragment_temp_viewpager); //将TabLayout与ViewPager绑定在一起 mTabLayout = view.findViewById(R.id.fragment_temp_tabLayout); mTabLayout.setupWithViewPager(mViewPager); //指定Tab的位置 one = mTabLayout.getTabAt(0); two = mTabLayout.getTabAt(1); changeFragment(0); mTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() { @Override public void onTabSelected(TabLayout.Tab tab) { Log.e(TAG,\"postion:\"+tab.getPosition()); changeFragment(tab.getPosition()); } @Override public void onTabUnselected(TabLayout.Tab tab) { } @Override public void onTabReselected(TabLayout.Tab tab) { } }); } private void changeFragment(int position) { FragmentTransaction transaction = getActivity().getSupportFragmentManager().beginTransaction(); transaction.replace(R.id.fl_content_temp, mFragmentList.get(position)); transaction.commit(); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); myFragmentPagerAdapter = new TemporaryTaskFragmentAdapter(getChildFragmentManager()); mViewPager.setAdapter(myFragmentPagerAdapter); } 这样上面出现的bug就解决了。","link":"/2020/05/09/%E5%9C%A8%E5%AD%90fragment%E5%AE%9E%E7%8E%B0TabLayout%E5%92%8CViewPager%E7%9A%84%E7%BB%84%E5%90%88/"},{"title":"实现博客多级目录存储","text":"实现将hexo中的markdown文件按照日期分成不同的文件夹。 1:问题描述​ 原来使用hexo的命令创建博客文件时，所有的markdown文件全部放在了source/_posts的目录下，现在想实现将新创建的markdown文件按照文件创建的日期自动归档这样的话，可以使得自己的博客文章归档的目录一目了然。 2:实现的步骤实现的步骤如下所示： ​ 生成的文章名字及其对应永久链接，可以在_config.yml中配置，分别是new_post_name: :title.md # File name of new posts和permalink: :year/:month/:day/:title/这两项。 把new_post_name的值改为:year/:title.md ， 让每次运行hexo new post [title]时新建的文件按年份存放， 但是却发现生成的html文件的链接也变了，比如source/_post/2018/test.md对应的博客地址， 原本应该是2018/12/22/test/，现在却变成了2018/12/22/2018/test/。 也就是，配置中的permalink值里的:title，实际取的不是文件名称，而是相对于source/_post的相对路径（不含后缀）。 这可能是个Bug，因为在permalink和new_post_name中，用的是同一个变量:title，但是它们的值却是不同的。 如果我们是按年月日归档，而链接保持不变，大可配置为如下： 12permalink: :titlenew_post_name: :year/:month/:day/:title/ 如果想按年月归档，可以这样设置： 1new_post_name: :year/:month/:title.md 而文章的链接，一番搜索之后，发现可以在我们文章的markdown文件的Front-matter中添加permalink参数，来指定文章的链接（见 https://hexo.io/docs/permalinks.html#comment-2657776966 ）。如果我们在_config.yml中的permalink配置为如下： 1permalink: :year/:month/:day/:title/ 那最终生成的文章的链接就是:year/:month/:day/:文章中的permalink/。这完全就是我想要的！ 3:markdown的模板设置 文章的模版在scaffolds/post.md，内容修改如下： 1234567---title: {{ title }}permalink: {{ title }}date: {{ date }}tags:categories:--- 4:本地图片插入格式这样设置完之后，我的本地图片也想按照这样展示，按日期进行归档，但是在进行相对路径填写时，需要有点改变 我的本地所有图片的存放位置在跟_posts文件夹同级的目录下的image文件夹下，如下图所示: 此时图片的相对路径是图片相对于markdown文件的路径，所以需要设置为： 1![效果展示](../../../image/2020/05/2020052603.png) 5:参考文章 https://blog.csdn.net/maosidiaoxian/article/details/85220394 6:补充文章当hexo博客迁移时可以参考这个 https://blog.csdn.net/xjm850552586/article/details/84101308","link":"/2020/05/26/%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"Jupyter","slug":"Jupyter","link":"/tags/Jupyter/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"menu","slug":"menu","link":"/tags/menu/"},{"name":"Fragment","slug":"Fragment","link":"/tags/Fragment/"},{"name":"TabLayout","slug":"TabLayout","link":"/tags/TabLayout/"},{"name":"ViewPager","slug":"ViewPager","link":"/tags/ViewPager/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[{"name":"java","slug":"java","link":"/categories/java/"},{"name":"pyhton","slug":"pyhton","link":"/categories/pyhton/"},{"name":"android","slug":"android","link":"/categories/android/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"}]}